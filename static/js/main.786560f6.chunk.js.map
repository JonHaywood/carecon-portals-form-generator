{"version":3,"sources":["../node_modules/prettier sync","components/CodeDisplay/JsxTemplates.js","components/CodeDisplay/CodeDisplay.js","helpers/createAction.js","components/FormGenerator/reducer.js","components/FieldDefinitions/FieldDefinitions.js","hooks/useDebounce.js","components/FormSettings/FormSettings.js","components/FormGenerator/FormGenerator.js","hooks/useReducer.js","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","formTemplate","CodeDisplay","state","useContext","FormGeneratorContext","useState","codeString","setCodeString","wasCopied","setWasCopied","useEffect","config","newCodeString","includes","Set","fields","map","x","type","settings","isDialog","validationFields","filter","required","augmentConfig","ejs","render","prettier","format","parser","plugins","babelParser","tabWidth","className","onClick","copy","setTimeout","language","style","a11yDark","customStyle","height","margin","createAction","payload","initialState","slice","prefix","useFormTag","fieldDefinitions","label","name","isEnum","actions","reducer","action","value","update","$set","setFieldDefinitions","dispatch","getState","split","generateFieldsFromDefinition","generateFieldsFromDefinitions","fieldDefinition","trim","replace","startCase","field","endsWith","startsWith","toLowerCase","indexOf","TextArea","Input","FieldDefinitions","localFieldDefinitions","setLocalFieldDefinitions","debouncedLocalFieldDefinitions","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","useDebounce","undefined","Card","bg","text","Body","Subtitle","SettingFilled","Text","size","initialValues","onValuesChange","changedValues","Item","rows","autoComplete","autoCorrect","autoCapitalize","spellCheck","QuestionCircleFilled","FormSettings","labelCol","span","wrapperCol","Object","entries","pop","valuePropName","React","createContext","FormGenerator","useReducer","customDispatch","context","Provider","ThunderboltOutlined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.786560f6.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 127;","export const formTemplate = `import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';<% if (validationFields.length > 0) { %>\r\n    import * as Yup from 'yup';\r\n<% } %>import {\r\n    Suspend, \r\n    Form, \r\n    FieldGroup, \r\n    FieldLabel, \r\n    FieldInput,\r\n    <% includes.forEach(include => { %><%= include %>,<% }) %>\r\n} from '@cc/common';\r\n\r\n// IMPLEMENT THE BELOW REDUX THUNKS\r\nimport {\r\n    loadExistingItem,\r\n    saveItem,\r\n} from 'redux/slices/myDialog';\r\n\r\nexport const MyForm = ({ <% if (settings.isDialog) { %>onAccept, onCancel<% } %> }) => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    // THIS CODE BLOCK CAN BE DELETED IF LOADING AN EXISTING ITEM IS NOT APPLICABLE\r\n    useEffect(() => {<% if (settings.isDialog) {%>\r\n        if (!isVisible) return;\r\n        <% } %>\r\n        const init = async () => {\r\n            setIsLoading(true);\r\n            await dispatch(loadExistingItem(existingId));\r\n            setIsLoading(false);\r\n        };\r\n\r\n        init();\r\n    }, [existingId]);\r\n    <% if (settings.isDialog) {%>\r\n    if (!isVisible) return null;\r\n    <% } %>\r\n    const handleSubmit = async (actions) => {\r\n        const { wasSuccessful, itemId } = await dispatch(saveItem());\r\n        await actions.completeSubmission();\r\n        if (!wasSuccessful) return;\r\n        <% if (settings.isDialog) {%>onAccept(itemId);<% } %>\r\n        await actions.resetForm();\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            slice=\"<%= settings.slice %>\"\r\n            <%_ if (settings.prefix) { %>\r\n            prefix=\"<%= settings.prefix %>\"<% if (validationFields.length > 0) { %>\r\n            <% } _%>\r\n            validation={Yup.object({\r\n            <% validationFields.forEach(validationField => { %>\r\n                <%= validationField.name %>: Yup.string().required('<%= validationField.label %> is required'),<% }) %>\r\n            })}\r\n            <% } %>\r\n            onSubmit={handleSubmit}\r\n            useFormTag={true}\r\n        ><% if (settings.isDialog) { %>\r\n            <FormDialog\r\n                title=\"My Dialog\"\r\n                acceptText=\"Save\"\r\n                acceptButtonType=\"submit\"\r\n                onCancel={(actions) => {\r\n                    actions.resetForm();\r\n                    onCancel();\r\n                }}\r\n                className=\"my-dialog\"\r\n            ><% } %>\r\n                <Suspend isLoading={isLoading}><% if (settings.isDialog) { %>\r\n                    <FormDialogContent><% } %><% fields.forEach(field => { %>\r\n                        <FieldGroup horizontal>\r\n                            <FieldLabel<% if (field.required) { %> required<% } %>><%= field.label %></FieldLabel>\r\n                            <FieldInput stretch>\r\n                                <<%= field.type %> name=\"<%= field.name %>\"<% if(field.isEnum) { %> enumType=\"<%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>\"<% } %> <% if (field.required) { %> required <% } %>/>\r\n                            </FieldInput>\r\n                        </FieldGroup><% }); %>\r\n                        <% if (settings.isDialog) { %></FormDialogContent><% } %>\r\n                    <% if (!settings.isDialog) { %><SubmitButton /><% } %>\r\n                </Suspend><% if (settings.isDialog) { %>\r\n            </FormDialog><% } %>\r\n        </Form>\r\n    )\r\n};\r\n\r\nMyForm.PropTypes = {\r\n\r\n};\r\n`;","import './CodeDisplay.scss';\r\nimport React, { useContext, useState, useEffect } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { a11yDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport ejs from 'ejs';\r\nimport prettier from 'prettier/standalone';\r\nimport babelParser from 'prettier/parser-babel';\r\nimport copy from 'copy-to-clipboard';\r\nimport { FormGeneratorContext } from '../FormGenerator';\r\nimport { formTemplate } from './JsxTemplates';\r\n\r\nexport const CodeDisplay = () => {\r\n    const { state } = useContext(FormGeneratorContext);\r\n    const [codeString, setCodeString] = useState('Generating...');\r\n    const [wasCopied, setWasCopied] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let newCodeString = generateFormJsx(state);\r\n        // needed because of conditional wrapping components\r\n        newCodeString = prettier.format(newCodeString, { \r\n            parser: 'babel', \r\n            plugins: [babelParser],\r\n            tabWidth: 4,\r\n        });\r\n        setCodeString(newCodeString);\r\n    }, [state]);\r\n\r\n    const handleCopyToClipboardClick = () => {\r\n        copy(codeString);\r\n        setWasCopied(true);\r\n        setTimeout(() => setWasCopied(false), 2000);\r\n    };\r\n\r\n    return (\r\n        <div className=\"code-display\">\r\n            <div className=\"code-display__copy\" onClick={handleCopyToClipboardClick}>\r\n                {wasCopied ? '---- copied! ----' : 'copy to clipboard'}\r\n            </div>\r\n            <SyntaxHighlighter \r\n                language=\"javascript\"\r\n                style={a11yDark} \r\n                customStyle={{ height: '100%', margin: '0' }}\r\n            >\r\n                {codeString}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    );\r\n};\r\n\r\n// helpers\r\n\r\nfunction generateFormJsx(config) {\r\n    config = augmentConfig(config);\r\n    const codeString = ejs.render(formTemplate, config);\r\n    return  codeString;\r\n}\r\n\r\nfunction augmentConfig(config) {\r\n    config = { ...config };\r\n\r\n    // add includes\r\n    config.includes = [\r\n        ...new Set(config.fields.map(x => x.type)), // Set makes it a unique array \r\n        ...(config.settings.isDialog ? ['FormDialog', 'FormDialogContent'] : ['SubmitButton']),\r\n    ];\r\n    // add validation\r\n    config.validationFields = config.fields.filter(x => x.required)\r\n\r\n    return config;\r\n}","export default function createAction(type, payload) {\r\n    return { type, payload };\r\n}","import update from 'immutability-helper';\r\nimport { startCase } from 'lodash-es';\r\nimport createAction from '../../helpers/createAction';\r\nexport { default as createAction } from '../../helpers/createAction';\r\n\r\nexport const initialState = {\r\n    settings: {\r\n        slice: 'patient',\r\n        prefix: 'patientForm',\r\n        isDialog: true,\r\n        useFormTag: true,\r\n    },\r\n    fieldDefinitions: 'firstName*\\nlastName*\\nencounterDate\\nencounterType\\nisArchived',\r\n    fields: [\r\n        { type: 'TextField', label: 'First Name', name: 'firstName', required: true },\r\n        { type: 'TextField', label: 'Last Name', name: 'lastName', required: true },\r\n        { type: 'DateField', label: 'EncounterDate', name: 'encounterDate', required: false },\r\n        { type: 'SelectField', label: 'EncounterType', name: 'encounterType', required: false, isEnum: true },\r\n        { type: 'ToggleField', label: 'isArchived', name: 'isArchived', required: false },\r\n    ]\r\n};\r\n\r\nexport const actions = {\r\n    UpdateSetting: 'UPDATE_SETTING',\r\n    UpdateFieldDefinitions: 'UPDATE_FIELDDEFINITIONS',\r\n    UpdateFields: 'UPDATE_FIELDS',\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case actions.UpdateSetting: {\r\n            const { name, value } = action.payload;   \r\n            return update(state, {\r\n                settings: {\r\n                    [name]: { $set: value }\r\n                }\r\n            });\r\n        }\r\n        case actions.UpdateFieldDefinitions: {\r\n            return update(state, {\r\n                fieldDefinitions: {\r\n                    $set: action.payload\r\n                }\r\n            });\r\n        }\r\n        case actions.UpdateFields: {\r\n            return update(state, {\r\n                fields: {\r\n                    $set: action.payload\r\n                }\r\n            });\r\n        }\r\n        default:\r\n            throw new Error(`invalid action type '${action.type}'`);\r\n    }\r\n};\r\n\r\nexport const setFieldDefinitions = (fieldDefinitions) => (dispatch, getState) => {\r\n    dispatch(createAction(actions.UpdateFieldDefinitions, fieldDefinitions));\r\n    \r\n    const fields = generateFieldsFromDefinitions(fieldDefinitions);\r\n    dispatch(createAction(actions.UpdateFields, fields));\r\n}\r\n\r\n// helpers\r\n\r\nfunction generateFieldsFromDefinitions(fieldDefinitions) {\r\n    const lines = fieldDefinitions.split(/\\r?\\n/);\r\n    return lines.map(generateFieldsFromDefinition).filter(x => !!x);\r\n}\r\n\r\nfunction generateFieldsFromDefinition(fieldDefinition) {\r\n    fieldDefinition = fieldDefinition.trim(); // trim whitespace\r\n    if (!fieldDefinition) \r\n        return null;\r\n\r\n    const name = fieldDefinition.replace(/\\W/g, '');\r\n    const label = startCase(name);\r\n\r\n    const field = {\r\n        type: 'TextField',\r\n        name,\r\n        label,\r\n        required: fieldDefinition.endsWith('*')\r\n    };\r\n\r\n    // modify type\r\n    if (field.name.startsWith('is')) {\r\n        field.type = 'ToggleField';\r\n        field.label = label.replace('Is ', '') + '?';\r\n    } else if (field.name.toLowerCase().indexOf('date') > -1) {\r\n        field.type = 'DateField';\r\n    } else if (field.name.toLowerCase().endsWith('type')) {\r\n        field.type = 'SelectField';\r\n        field.isEnum = true;\r\n    } else if (field.name.toLowerCase().indexOf('description') > -1) {\r\n        field.type = 'MultilineTextField';\r\n    }\r\n\r\n    return field;\r\n}","import './FieldDefinitions.scss';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Form, Input } from 'antd'; \r\nimport { QuestionCircleFilled, SettingFilled } from '@ant-design/icons';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport { FormGeneratorContext, setFieldDefinitions } from '../FormGenerator';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst DEBOUNCE_TIME = 300;\r\n\r\nexport const FieldDefinitions = () => {\r\n    const { state, dispatch } = useContext(FormGeneratorContext);\r\n    const { fieldDefinitions } = state;\r\n\r\n    const [localFieldDefinitions, setLocalFieldDefinitions] = useState(fieldDefinitions);\r\n    const debouncedLocalFieldDefinitions = useDebounce(localFieldDefinitions, DEBOUNCE_TIME);\r\n\r\n    useEffect(() => {\r\n        if (debouncedLocalFieldDefinitions === undefined)\r\n            return;\r\n        dispatch(setFieldDefinitions(debouncedLocalFieldDefinitions));\r\n    }, [debouncedLocalFieldDefinitions]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleValuesChange = (changedValues) => {\r\n        setLocalFieldDefinitions(changedValues.fieldDefinitions);\r\n    };\r\n\r\n    return (\r\n        <Card bg=\"dark\" text=\"white\" className=\"field-definitions\">\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"mb-2\"><SettingFilled /> Field Definitions</Card.Subtitle>\r\n                <Card.Text className=\"field-definitions__description\">\r\n                    Enter a field name on each line. <em>Note: add a <span className=\"text-white\">*</span> after \r\n                    the name to mark the field as required.</em>\r\n                </Card.Text>\r\n                <Form \r\n                    size=\"small\"\r\n                    initialValues={{ fieldDefinitions: localFieldDefinitions }}\r\n                    onValuesChange={handleValuesChange}\r\n                    className=\"mb-2\"\r\n                >\r\n                    <Form.Item name=\"fieldDefinitions\">\r\n                        <TextArea \r\n                            rows={6} \r\n                            autoComplete=\"off\" \r\n                            autoCorrect=\"off\" \r\n                            autoCapitalize=\"off\" \r\n                            spellCheck=\"false\" \r\n                        />\r\n                    </Form.Item>\r\n                </Form>\r\n                <Card.Text className=\"field-definitions__description\">\r\n                    <QuestionCircleFilled /> Some field types are auto-detected based on the field name.\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};","import { useState, useEffect } from 'react';\r\n\r\nexport default function useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Update debounced value after delay\r\n            const handler = setTimeout(() => {\r\n                setDebouncedValue(value);\r\n            }, delay);\r\n\r\n            // Cancel the timeout if value changes (also on delay change or unmount)\r\n            // This is how we prevent debounced value from updating if value is changed ...\r\n            // .. within the delay period. Timeout gets cleared and restarted.\r\n            return () => {\r\n                clearTimeout(handler);\r\n            };\r\n        },\r\n        [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n\r\n    return debouncedValue;\r\n}\r\n","import './FormSettings.scss';\r\nimport React, { useContext } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Form, Input, Switch } from 'antd'; \r\nimport { SettingFilled } from '@ant-design/icons';\r\nimport { FormGeneratorContext, createAction, actions } from '../FormGenerator';\r\n\r\nexport const FormSettings = () => {\r\n    const { state, dispatch } = useContext(FormGeneratorContext);\r\n\r\n    const handleValuesChange = (changedValues) => {\r\n        const [name, value] = Object.entries(changedValues).pop();\r\n        dispatch(createAction(actions.UpdateSetting, { name, value }));\r\n    };\r\n\r\n    return (\r\n        <Card bg=\"secondary\" text=\"white\" className=\"form-settings\">\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"mb-2\"><SettingFilled /> Form Settings</Card.Subtitle>\r\n                <Form \r\n                    size=\"small\"\r\n                    labelCol={{ span: 8 }}\r\n                    wrapperCol={{ span: 14 }}\r\n                    initialValues={{ ...state.settings }}\r\n                    onValuesChange={handleValuesChange}\r\n                >\r\n                    <Form.Item label=\"Slice\" name=\"slice\">\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Prefix\" name=\"prefix\">\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Dialog?\" name=\"isDialog\" valuePropName=\"checked\">\r\n                        <Switch />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Form Tag?\" name=\"useFormTag\" valuePropName=\"checked\">\r\n                        <Switch />\r\n                    </Form.Item>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};","import './FormGenerator.scss';\r\nimport React from 'react';\r\nimport { Row, Col } from 'antd';\r\nimport useReducer from '../../hooks/useReducer';\r\nimport { CodeDisplay } from '../CodeDisplay/CodeDisplay';\r\nimport { initialState, reducer } from './reducer';\r\nimport { FieldDefinitions } from '../FieldDefinitions';\r\nimport { FormSettings } from '../FormSettings/FormSettings';\r\nimport { ThunderboltOutlined } from '@ant-design/icons';\r\n\r\nexport const FormGeneratorContext = React.createContext();\r\n\r\nexport const FormGenerator = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const context = { state, dispatch };\r\n\r\n    return (\r\n        <FormGeneratorContext.Provider value={context}>\r\n            <div className=\"form-generator\" >\r\n                <Row>\r\n                    <Col span={8} className=\"form-generator__sidebar\">\r\n                        <h1><ThunderboltOutlined /> Form Generator</h1>\r\n                        <FormSettings />\r\n                        <FieldDefinitions />\r\n                    </Col>\r\n                    <Col span={16} className=\"form-generator__code\">\r\n                        <CodeDisplay />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </FormGeneratorContext.Provider>\r\n    );\r\n};","import { useReducer } from 'react';\r\n\r\nexport default function useReducerWithThunk(reducer, initialState) {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const getState = () => state;\r\n\r\n    let customDispatch = (action) => {\r\n        if (typeof action === 'function') {\r\n            action(customDispatch, getState);\r\n        } else {\r\n            dispatch(action);\r\n        }\r\n    };\r\n    \r\n    return [state, customDispatch];\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'antd/dist/antd.css';\nimport './App.scss';\nimport React from 'react';\nimport { FormGenerator } from './components/FormGenerator';\n\nconst App = () => {\n\treturn (\n\t\t<FormGenerator />\n\t);\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}